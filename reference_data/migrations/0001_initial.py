# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-02-07 12:04
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='dbNSFPGene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_id', models.CharField(db_index=True, max_length=20)),
                ('function_desc', models.TextField(blank=True, null=True)),
                ('disease_desc', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GencodeGene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom', models.CharField(max_length=1)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('source', models.CharField(choices=[(b'H', b'HAVANA'), (b'E', b'ENSEMBL')], max_length=1)),
                ('strand', models.CharField(max_length=1)),
                ('gene_id', models.CharField(db_index=True, max_length=20)),
                ('gene_type', models.CharField(db_index=True, max_length=30)),
                ('gene_status', models.CharField(choices=[(b'K', b'KNOWN'), (b'N', b'NOVEL'), (b'P', b'PUTATIVE')], max_length=1)),
                ('gene_name', models.CharField(db_index=True, max_length=30)),
                ('level', models.IntegerField()),
                ('protein_id', models.CharField(max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GencodeRelease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('release_number', models.IntegerField(unique=True)),
                ('release_date', models.DateTimeField(unique=True)),
                ('genome_build_id', models.CharField(choices=[(b'b37', b'b37'), (b'b38', b'b38')], max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='GencodeTranscript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom', models.CharField(max_length=1)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('source', models.CharField(choices=[(b'H', b'HAVANA'), (b'E', b'ENSEMBL')], max_length=1)),
                ('strand', models.CharField(max_length=1)),
                ('transcript_id', models.CharField(db_index=True, max_length=20)),
                ('transcript_status', models.CharField(choices=[(b'K', b'KNOWN'), (b'N', b'NOVEL'), (b'P', b'PUTATIVE')], max_length=1)),
                ('transcript_name', models.CharField(db_index=True, max_length=30)),
                ('transcript_support_level', models.IntegerField(null=True)),
                ('gencode_release', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GencodeRelease')),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GencodeGene')),
            ],
        ),
        migrations.CreateModel(
            name='HumanPhenotypeOntology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hpo_id', models.CharField(db_index=True, max_length=20, unique=True)),
                ('parent_id', models.CharField(blank=True, max_length=20, null=True)),
                ('category_id', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('is_category', models.BooleanField(db_index=True, default=False)),
                ('name', models.TextField()),
                ('definition', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OMIM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mim_number', models.IntegerField()),
                ('gene_id', models.CharField(db_index=True, max_length=20)),
                ('gene_symbol', models.CharField(blank=True, max_length=20, null=True)),
                ('gene_description', models.TextField(blank=True, max_length=20, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('phenotype_inheritance', models.TextField(blank=True, null=True)),
                ('phenotype_mim_number', models.IntegerField(blank=True, null=True)),
                ('phenotype_description', models.TextField(blank=True, null=True)),
                ('phenotype_map_method', models.CharField(choices=[(b'1', b'the disorder is placed on the map based on its association with a gene, but the underlying defect is not known.'), (b'2', b'the disorder has been placed on the map by linkage; no mutation has been found.'), (b'3', b'the molecular basis for the disorder is known; a mutation has been found in the gene.'), (b'4', b'a contiguous gene deletion or duplication syndrome, multiple genes are deleted or duplicated causing the phenotype.')], max_length=1)),
                ('date_downloaded', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='omim',
            unique_together=set([('mim_number', 'phenotype_description')]),
        ),
        migrations.AddField(
            model_name='gencodegene',
            name='gencode_release',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GencodeRelease'),
        ),
        migrations.AlterUniqueTogether(
            name='gencodetranscript',
            unique_together=set([('gencode_release', 'chrom', 'start', 'end', 'transcript_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='gencodegene',
            unique_together=set([('gencode_release', 'chrom', 'start', 'end', 'gene_id')]),
        ),
    ]
