kind: Service
apiVersion: v1
metadata:
  name: seqr
  namespace: {{ NAMESPACE }}
  labels:
    name: seqr
    deployment: {{ DEPLOY_TO }}
spec:
  type: NodePort
  ports:
  - port: {{ SEQR_SERVICE_PORT }}
  selector:
    name: seqr
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: seqr
  namespace: {{ NAMESPACE }}
  labels:
    name: seqr
    deployment: {{ DEPLOY_TO }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: seqr
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/opaque-ports: "6379,5432"
      labels:
        name: seqr
        deployment: {{ DEPLOY_TO }}
    spec:
      priorityClassName: high-priority
      volumes:
      - name: gcloud-client-secrets-volume
        secret:
          secretName: gcloud-client-secrets
      - name: matchbox-secrets-volume
        secret:
          secretName: matchbox-secrets
      # - name: elasticsearch-es-http-certs-public
      #   secret:
      #     secretName: elasticsearch-es-http-certs-public
      containers:
      - name: seqr-pod
        ports:
        - containerPort: 8000
          protocol: TCP
        imagePullPolicy: {{ IMAGE_PULL_POLICY }}
        image: {{ DOCKER_IMAGE_PREFIX }}/seqr{{ DOCKER_IMAGE_TAG }}
        volumeMounts:
        - name: gcloud-client-secrets-volume
          mountPath: /.config
          readOnly: true
        - name: matchbox-secrets-volume
          mountPath: {{ MME_CONFIG_DIR }}
        # - name: elasticsearch-es-http-certs-public
        #   mountPath: "/elasticsearch-certs"
        #   readOnly: true
        resources:
          requests:
            memory: "0.5Gi"
            cpu: "0.05"
          limits:
            memory: "{{ SEQR_POD_MEMORY_LIMIT }}"
            cpu: "8"
        envFrom:
          - configMapRef:
              name: all-settings
        env:
        - name: POSTGRES_USERNAME
          value: "{{ POSTGRES_USERNAME }}"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: password
        - name: OMIM_KEY
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: omim_key
        - name: POSTMARK_SERVER_TOKEN
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: postmark_server_token
        - name: SLACK_TOKEN
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: slack_token
        - name: AIRTABLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: airtable_key
        - name: AIRFLOW_API_AUDIENCE
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: airflow_api_audience
        - name: DJANGO_KEY
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: django_key
        - name: SEQR_ES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: seqr_es_password
        - name: SOCIAL_AUTH_GOOGLE_OAUTH2_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: google_client_id
        - name: SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: google_client_secret
        - name: GA_TOKEN_ID
          valueFrom:
            secretKeyRef:
              name: seqr-secrets
              key: ga_token_id
        - name: KIBANA_ES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kibana-secrets
              key: elasticsearch.password
        - name: GCLOUD_PROJECT      #  TODO can delete these and just rely on 'envFrom configMapRef' above once https://github.com/kubernetes/minikube/issues/2295 is fixed
          value: "{{ GCLOUD_PROJECT }}"
        - name: GCLOUD_ZONE
          value: "{{ GCLOUD_ZONE }}"
        - name: GUNICORN_WORKER_THREADS
          value: "{{ GUNICORN_WORKER_THREADS }}"
        - name: POSTGRES_SERVICE_HOSTNAME
          value: "{{ POSTGRES_SERVICE_HOSTNAME }}"
        - name: ELASTICSEARCH_SERVICE_HOSTNAME
          value: "{{ ELASTICSEARCH_SERVICE_HOSTNAME }}"
        - name: KIBANA_SERVICE_HOSTNAME
          value: "{{ KIBANA_SERVICE_HOSTNAME }}"
        - name: REDIS_SERVICE_HOSTNAME
          value: "{{ REDIS_SERVICE_HOSTNAME }}"
        - name: POSTGRES_SERVICE_PORT
          value: "{{ POSTGRES_SERVICE_PORT }}"
        - name: ELASTICSEARCH_SERVICE_PORT
          value: "{{ ELASTICSEARCH_SERVICE_PORT }}"
        - name: KIBANA_SERVICE_PORT
          value: "{{ KIBANA_SERVICE_PORT }}"
        - name: DEPLOYMENT_TYPE
          value: "{{ DEPLOYMENT_TYPE }}"
        - name: SEQR_GIT_BRANCH
          value: "{{ SEQR_GIT_BRANCH }}"
        - name: BASE_URL
          value: "https://{{ CLUSTER_HOSTNAME }}/"
        - name: RUN_CRON_JOBS
          value: "{{ RUN_CRON_JOBS }}"
        - name: MME_CONFIG_DIR
          value: "{{ MME_CONFIG_DIR }}"
        - name: TERRA_API_ROOT_URL
          value: "{{ TERRA_API_ROOT_URL }}"
        - name: AIRFLOW_WEBSERVER_URL
          value: "{{ AIRFLOW_WEBSERVER_URL }}"
        - name: ELASTICSEARCH_PROTOCOL
          value: "{{ ELASTICSEARCH_PROTOCOL }}"
        # - name: ELASTICSEARCH_CA_PATH
        #   value: "{{ ELASTICSEARCH_CA_PATH }}"
        - name: TERRA_PERMS_CACHE_EXPIRE_SECONDS
          value: "{{ TERRA_PERMS_CACHE_EXPIRE_SECONDS }}"
        - name: TERRA_WORKSPACE_CACHE_EXPIRE_SECONDS
          value: "{{ TERRA_WORKSPACE_CACHE_EXPIRE_SECONDS }}"
        - name: ANALYST_PROJECT_CATEGORY
          value: "{{ ANALYST_PROJECT_CATEGORY }}"
        - name: ANALYST_USER_GROUP
          value: "{{ ANALYST_USER_GROUP }}"
        - name: PM_USER_GROUP
          value: "{{ PM_USER_GROUP }}"
        - name: GCS_MEDIA_ROOT_BUCKET
          value: "{{ GCS_MEDIA_ROOT_BUCKET }}"
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /readiness_probe
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.17
        command:
          - "/cloud_sql_proxy"
          - "-instances={{ GCLOUD_PROJECT }}:{{ GCLOUD_ZONE }}:postgres-{{ DEPLOYMENT_TYPE}}=tcp:{{ POSTGRES_SERVICE_PORT }}"
          - "-credential_file=/.config/service-account-key.json"
        securityContext:
          # The default Cloud SQL proxy image runs as the "nonroot" user and group (uid: 65532) by default.
          runAsNonRoot: true
        volumeMounts:
        - name: gcloud-client-secrets-volume
          mountPath: /.config
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "1"
          limits:
            memory: "2Gi"
            cpu: "2"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1.0
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "name"
                      operator: In
                      values:
                      - seqr
                topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        cloud.google.com/gke-nodepool: 'default-pool'
---
# docs @ https://kubernetes.github.io/ingress-nginx/user-guide/basic-usage/
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: ingress-nginx
  namespace: {{ NAMESPACE }}
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
      grpc_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
spec:
  ingressClassName: nginx
  tls:
    - hosts:
      - {{ CLUSTER_HOSTNAME }}
      secretName: nginx-secrets
  rules:
    - host: {{ CLUSTER_HOSTNAME }}
      http:
        paths:
        - backend:
            service:
              name: seqr
              port:
                number: {{ SEQR_SERVICE_PORT }}
          path: /
          pathType: ImplementationSpecific
