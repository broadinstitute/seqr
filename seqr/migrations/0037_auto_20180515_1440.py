# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-05-15 14:40
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('seqr', '0036_auto_20180415_2250'),
    ]

    operations = [
        migrations.CreateModel(
            name='SavedVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid', models.CharField(db_index=True, max_length=30, unique=True)),
                ('created_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('last_modified_date', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('genome_version', models.CharField(choices=[(b'37', b'GRCh37'), (b'38', b'GRCh38')], default=b'37', max_length=5)),
                ('xpos_start', models.BigIntegerField()),
                ('xpos_end', models.BigIntegerField(null=True)),
                ('ref', models.TextField()),
                ('alt', models.TextField()),
                ('lifted_over_genome_version', models.CharField(blank=True, choices=[(b'37', b'GRCh37'), (b'38', b'GRCh38')], max_length=5, null=True)),
                ('lifted_over_xpos_start', models.BigIntegerField(null=True)),
                ('saved_variant_json', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='seqr.Family')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='seqr.Project')),
            ],
        ),
        migrations.CreateModel(
            name='VariantFunctionalData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid', models.CharField(db_index=True, max_length=30, unique=True)),
                ('created_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('last_modified_date', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('functional_data_tag', models.TextField(choices=[(b'Functional Data', ((b'Biochemical Function', b'{"color": "#311B92", "description": "Gene product performs a biochemical function shared with other known genes in the disease of interest, or consistent with the phenotype."}'), (b'Protein Interaction', b'{"color": "#4A148C", "description": "Gene product interacts with proteins previously implicated (genetically or biochemically) in the disease of interest."}'), (b'Expression', b'{"color": "#7C4DFF", "description": "Gene is expressed in tissues relevant to the disease of interest and/or is altered in expression in patients who have the disease."}'), (b'Patient Cells', b'{"color": "#B388FF", "description": "Gene and/or gene product function is demonstrably altered in patients carrying candidate mutations."}'), (b'Non-patient cells', b'{"color": "#9575CD", "description": "Gene and/or gene product function is demonstrably altered in human cell culture models carrying candidate mutations."}'), (b'Animal Model', b'{"color": "#AA00FF", "description": "Non-human animal models with a similarly disrupted copy of the affected gene show a phenotype consistent with human disease state."}'), (b'Non-human cell culture model', b'{"color": "#BA68C8", "description": "Non-human cell-culture models with a similarly disrupted copy of the affected gene show a phenotype consistent with human disease state."}'), (b'Rescue', b'{"color": "#663399", "description": "The cellular phenotype in patient-derived cells or engineered equivalents can be rescued by addition of the wild-type gene product."}'))), (b'Functional Scores', ((b'Genome-wide Linkage', b'{"color": "#880E4F", "description": "Max LOD score used in analysis to restrict where you looked for causal variants; provide best score available, whether it be a cumulative LOD score across multiple families or just the best family\'s LOD score.", "metadata_title": "LOD Score"}'), (b'Bonferroni corrected p-value', b'{"color": "#E91E63", "description": "Bonferroni-corrected p-value for gene if association testing/burden testing/etc was used to identify the gene.", "metadata_title": "P-value"}'), (b'Kindreds w/ Overlapping SV & Similar Phenotype', b'{"color": "#FF5252", "description": "Number of kindreds (1+) previously reported/in databases as having structural variant overlapping the gene and a similar phenotype.", "metadata_title": "#"}'))), (b'Additional Kindreds (Literature, MME)', ((b'Additional Unrelated Kindreds w/ Causal Variants in Gene', b'{"color": "#D84315", "description": "Number of additional kindreds with causal variants in this gene (Any other kindreds from collaborators, MME, literature etc). Do not count your family in this total.", "metadata_title": "# additional families"}'),))])),
                ('metadata', models.TextField(null=True)),
                ('search_parameters', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('saved_variant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqr.SavedVariant')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='variantfunctionaldata',
            unique_together=set([('functional_data_tag', 'saved_variant')]),
        ),
        migrations.AlterUniqueTogether(
            name='savedvariant',
            unique_together=set([('xpos_start', 'xpos_end', 'ref', 'alt', 'project', 'family')]),
        ),
        migrations.AlterIndexTogether(
            name='savedvariant',
            index_together=set([('xpos_start', 'ref', 'alt', 'project')]),
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='alt',
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='family',
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='genome_version',
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='lifted_over_genome_version',
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='lifted_over_xpos_start',
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='project',
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='ref',
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='saved_variant_json',
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='xpos_end',
        ),
        migrations.RemoveField(
            model_name='variantnote',
            name='xpos_start',
        ),
        migrations.AlterField(
            model_name='varianttagtype',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqr.Project'),
        ),
        migrations.AlterIndexTogether(
            name='varianttag',
            index_together=set([]),
        ),
        migrations.AddField(
            model_name='variantnote',
            name='saved_variant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqr.SavedVariant'),
        ),
        migrations.AddField(
            model_name='varianttag',
            name='saved_variant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqr.SavedVariant'),
        ),
        migrations.AlterUniqueTogether(
            name='varianttag',
            unique_together=set([('variant_tag_type', 'saved_variant')]),
        ),
        migrations.RemoveField(
            model_name='varianttag',
            name='alt',
        ),
        migrations.RemoveField(
            model_name='varianttag',
            name='family',
        ),
        migrations.RemoveField(
            model_name='varianttag',
            name='genome_version',
        ),
        migrations.RemoveField(
            model_name='varianttag',
            name='lifted_over_genome_version',
        ),
        migrations.RemoveField(
            model_name='varianttag',
            name='lifted_over_xpos_start',
        ),
        migrations.RemoveField(
            model_name='varianttag',
            name='ref',
        ),
        migrations.RemoveField(
            model_name='varianttag',
            name='saved_variant_json',
        ),
        migrations.RemoveField(
            model_name='varianttag',
            name='xpos_end',
        ),
        migrations.RemoveField(
            model_name='varianttag',
            name='xpos_start',
        ),
    ]
