# Generated by Django 3.2.18 on 2023-09-28 16:05

from collections import defaultdict
from django.db import migrations, models
from tqdm import tqdm

SAMPLE_TISSUE_MAP = {sample_id: 'A' for sample_id in {
    'MCH-103_1_NE1', 'MCH-75_1_NE1', 'MCH-44_1_NE1', 'MCH-80_1_NE1', 'MCH-199_1_NE1', 'MCH-68_1_NE1', 'MCH-55_1_NE1',
    'MCH-69_1_NE1', 'MCH-198_1_NE1',
}}


def update_tissue_type(apps, schema_editor):
    Sample = apps.get_model('seqr', 'Sample')
    rna_data_classes = {
        'rnaseqoutlier': apps.get_model('seqr', 'RnaSeqOutlier'),
        'rnaseqspliceoutlier': apps.get_model('seqr', 'RnaSeqSpliceOutlier'),
        'rnaseqtpm': apps.get_model('seqr', 'RnaSeqTpm'),
    }
    db_alias = schema_editor.connection.alias

    samples = Sample.objects.using(db_alias).filter(tissue_type__isnull=True)
    if not samples:
        return

    rna_samples = samples.filter(sample_type='RNA', is_active=True)
    non_rna_samples = samples.exclude(id__in=[s.id for s in rna_samples])
    individual_tissue_sample_map = defaultdict(lambda: defaultdict(list))
    for s in Sample.objects.using(db_alias).filter(
        tissue_type__isnull=False, individual_id__in=rna_samples.values_list('individual_id', flat=True),
    ):
        individual_tissue_sample_map[s.individual_id][s.tissue_type].append(s)

    grouped_samples = defaultdict(set)
    for s in rna_samples:
        if len(individual_tissue_sample_map[s.individual_id]) == 1:
            s.tissue_type = list(individual_tissue_sample_map[s.individual_id].keys())[0]
        elif s.data_source.startswith('fibroblasts__'):
            s.tissue_type = 'F'
        elif s.data_source.startswith('muscle__'):
            s.tissue_type = 'M'
        else:
            s.tissue_type = SAMPLE_TISSUE_MAP[s.sample_id]
        sample_key = (s.individual_id, s.tissue_type)
        grouped_samples[sample_key].add(s)
        existing_tissue_samples = individual_tissue_sample_map[s.individual_id].get(s.tissue_type)
        if existing_tissue_samples:
            grouped_samples[sample_key].update(existing_tissue_samples)

    print(f'Updating {len(rna_samples)} RNA samples')
    Sample.objects.using(db_alias).bulk_update(rna_samples, ['tissue_type'])

    # Should only have one sample per tissue per individual, but now may have duplicates
    duplicates = [sorted(v, key=lambda x: x.created_date, reverse=True) for k, v in grouped_samples.items() if len(v) > 1]
    print(f'Updating loaded RNA data for {len(duplicates)} duplicated samples')
    dup_id_map = {new_s.id: [old_s.id for old_s in old_samples] for new_s, *old_samples in duplicates}
    duplicated_ids = [id for ids in dup_id_map.values() for id in ids]
    dup_samples = Sample.objects.using(db_alias).filter(id__in=list(dup_id_map.keys()) + duplicated_ids)
    has_rna_data = {
        field: set(dup_samples.filter(**{f'{field}__isnull': False}).values_list('id', flat=True))
        for field in rna_data_classes
    }
    for new_s_id, old_sample_ids in tqdm(dup_id_map.items(), unit=' duplicates'):
        for field, model_cls in rna_data_classes.items():
            has_data_samples = has_rna_data[field]
            for old_s_id in old_sample_ids:
                if old_s_id in has_data_samples and new_s_id not in has_data_samples:
                    model_cls.objects.using(db_alias).filter(sample_id=old_s_id).update(sample_id=new_s_id)
                    has_data_samples.add(new_s_id)

    print(f'Deleting {len(duplicated_ids)} duplicate RNA samples')
    Sample.objects.using(db_alias).filter(id__in=duplicated_ids).delete()

    print(f'Updating {len(non_rna_samples)} non-RNA samples to default tissue type')
    non_rna_samples.update(tissue_type='X')


class Migration(migrations.Migration):

    atomic = False

    dependencies = [
        ('seqr', '0054_alter_sample_dataset_type'),
    ]

    operations = [
        migrations.RunPython(update_tissue_type, reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name='sample',
            name='tissue_type',
            field=models.CharField(choices=[('WB', 'whole_blood'), ('F', 'fibroblasts'), ('M', 'muscle'), ('L', 'lymphocytes'), ('A', 'airway_cultured_epithelium'), ('X', 'None')], max_length=2),
        ),
    ]
