#!/usr/bin/env python2.7

import argparse
import logging
import os
import sys

from deploy.utils.constants import DEPLOYMENT_TARGETS, DEPLOYABLE_COMPONENTS, \
    COMPONENT_GROUP_NAMES, resolve_component_groups
from deploy.utils.deploy_utils import deploy
from deploy.utils.kubectl_utils import run_in_pod, get_pod_name
from deploy.utils.loading_utils import load_example_project, load_allele_frequencies, \
    load_reference_data, load_project
from deploy.utils.servctl_utils import print_log, port_forward, \
    create_user, show_dashboard, show_status, wait_for, troubleshoot_component, \
    delete_component, reset_database, delete_all, get_component_port_pairs, \
    check_kubernetes_context, set_environment
from seqr.utils.shell_utils import run

logging.basicConfig(stream=sys.stdout, format='%(asctime)s %(levelname)-8s %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

SET_ENVIRONMENT_COMMAND = 'set-env'
STATUS_COMMAND = 'status'
DEPLOY_COMMAND = 'deploy'
DEPLOY_ALL_COMMAND = 'deploy-all'
LOAD_COMMAND = 'load'
DEPLOY_AND_LOAD_COMMAND = 'deploy-all-and-load'
LOG_COMMAND = 'logs'
TROUBLESHOOT_COMMAND = 'troubleshoot'
PORT_FORWARD_COMMAND = 'port-forward'
PORT_FORWARD_AND_LOG_COMMAND = 'connect-to'
COPY_TO_POD_COMMAND = 'copy-to'
COPY_FROM_POD_COMMAND = 'copy-from'
SHELL_COMMAND = 'shell'
DASHBOARD_COMMAND ='dashboard'
DELETE_COMMAND = 'delete'
DELETE_ALL_COMMAND = 'delete-all'
RESET_COMMAND = 'reset-database'
CREATE_USER_COMMAND = 'create-user'


p = argparse.ArgumentParser()
subparsers = p.add_subparsers(dest='command')

COMPONENT_ARG_CHOICES = DEPLOYABLE_COMPONENTS + COMPONENT_GROUP_NAMES

## ENVIRONMENT_COMMAND
sp = subparsers.add_parser(SET_ENVIRONMENT_COMMAND, description="Set terminal environment for a particular deployment target (eg. 'minikube', 'gcloud-dev', etc.)")
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## LOAD_COMMAND
sp = subparsers.add_parser(LOAD_COMMAND, description="Load reference or example datasets to initialize seqr.")
sp.add_argument("-g", "--genome-version", help="Genome version 37 or 38", choices=["37", "38"], required=True)
sp.add_argument("-i", "--project-id", help="Project ID", default="1kg")
sp.add_argument("-v", "--vcf", help="Url or google cloud bucket path (eg. gs://) of VEP-annotated VCF to load",
                default="https://storage.googleapis.com/seqr-public/test-projects/1kg-exomes/1kg.vep.vcf.gz")
sp.add_argument("-p", "--ped", help="Url or google cloud bucket path (eg. gs://) of pedigree file",
                default="https://storage.googleapis.com/seqr-public/test-projects/1kg-exomes/1kg.ped")
sp.add_argument("data", choices=['reference-data', 'allele-frequencies', 'example-project', 'mongo'])
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="which kubernetes cluster to load the data to")

## LOG_COMMAND
sp = subparsers.add_parser(LOG_COMMAND, description="Show logs for one or more components")
sp.add_argument("-f", "--stream-log", action="store_true", help="stream the log")
sp.add_argument("components", nargs="+", help="show log", choices=COMPONENT_ARG_CHOICES)
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## TROUBLESHOOT_COMMAND
sp = subparsers.add_parser(TROUBLESHOOT_COMMAND, description="Print detailed debugging info to troubleshoot components not starting")
sp.add_argument("component", help="print detailed debugging info", choices=COMPONENT_ARG_CHOICES)
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## PORT_FORWARD_COMMAND
sp = subparsers.add_parser(PORT_FORWARD_COMMAND, description="Start port-forwarding for service(s) running inside one or more containers, "
    "allowing connections via localhost. After starting port-forwarding as a background process, start streaming logs from these components. ")
sp.add_argument("components", nargs="+", help="start port-forwarding for service(s) running in the given component container(s), allowing connections via localhost", choices=COMPONENT_ARG_CHOICES)
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## PORT_FORWARD_AND_LOG_COMMAND
sp = subparsers.add_parser(PORT_FORWARD_AND_LOG_COMMAND, description="Start port-forwarding for service(s) running inside one or more containers, allowing connections via localhost")
sp.add_argument("components", nargs="+", help="start port-forwarding for service(s) running in the given component container(s), allowing connections via localhost", choices=COMPONENT_ARG_CHOICES)
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## COPY_COMMAND
for command in [COPY_TO_POD_COMMAND, COPY_FROM_POD_COMMAND]:
    sp = subparsers.add_parser(command, description="Copy files to or from a container")
    sp.add_argument("component", help="open a bash shell inside this component container", choices=COMPONENT_ARG_CHOICES)
    sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

    if command == COPY_TO_POD_COMMAND:
        sp.add_argument("source_path", help="source file path")
        sp.add_argument("dest_path", nargs="?", help="destination file path", default="~")
    elif command == COPY_FROM_POD_COMMAND:
        sp.add_argument("source_path", help="source file path")
        sp.add_argument("dest_path", nargs="?", help="destination file path", default=".")

## SHELL_COMMAND
sp = subparsers.add_parser(SHELL_COMMAND, description="Open a bash shell inside one of the component containers")
sp.add_argument("component", help="open a bash shell inside this component container", choices=COMPONENT_ARG_CHOICES)
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## CREATE_USER_COMMAND
sp = subparsers.add_parser(CREATE_USER_COMMAND, description="Create a new seqr superuser account.")
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## STATUS_COMMAND
sp = subparsers.add_parser(STATUS_COMMAND, description="Print docker and kubectl info")
sp.add_argument("deployment_target", nargs="?", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## DASHBOARD_COMMAND
sp = subparsers.add_parser(DASHBOARD_COMMAND, description="Show the kubernetes dashboard")
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## DELETE_COMMAND
sp = subparsers.add_parser(DELETE_COMMAND, description="Terminate any live deployments, services, and pods for a given component")
sp.add_argument("components", nargs="+", help="terminate all deployments, services, and pods for the given component(s)", choices=COMPONENT_ARG_CHOICES)
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## DELETE_ALL_COMMAND
sp = subparsers.add_parser(DELETE_ALL_COMMAND, description="Delete all components + the cluster")
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## RESET_COMMAND
sp = subparsers.add_parser(RESET_COMMAND, description="Delete all data from the given database")
sp.add_argument('database', nargs="+", choices=["seqrdb", "phenotipsdb", "mongodb"])
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="kubernetes cluster")

## DEPLOY_COMMAND, DEPLOY_ALL_COMMAND
def check_restore_db(filename):
    if not os.path.isfile(filename):
        p.error("File doesn't exist: %s" % filename)
    return os.path.abspath(filename)

for command_name in [DEPLOY_COMMAND, DEPLOY_ALL_COMMAND]:
    sp = subparsers.add_parser(command_name, description="Deploy one or more components")
    sp.add_argument("-o", "--output-dir", help="output directory for deployment files and logs")
    #sp.add_argument("-s", "--update-secrets", action="store_true",help="if deploying phenotips or seqr, clear and re-initialize the phenotips xwiki database")
    sp.add_argument("-b", "--build-docker-image", action="store_true", help="use 'docker build --no-cache' to rebuild docker image from the beginning without using cache")
    sp.add_argument("-d", "--delete-before-deploy", action="store_true", help="use 'kubectl delete' and then 'kubectl create' to deploy component(s) instead of just 'kubectl update'")
    sp.add_argument("-f", "--force", dest="build_docker_image_and_reset_db", action="store_true", help="Same as -b and -d together - reset the db and rebuild the docker image.")
    sp.add_argument("--reset-db", action="store_true", help="if deploying phenotips or seqr, clear and re-initialize the phenotips xwiki database")
    sp.add_argument("--restore-seqr-db-from-backup",
        help="if deploying seqr, this option can be used to specify a SQL database backup from "
            "which to restore the database. This backup file can be generated by running "
            "`pg_dump -U postgres seqrdb | gzip -c - > seqrdb_backup.sql.gz`", type=check_restore_db)
    sp.add_argument("--restore-phenotips-db-from-backup",
        help="if deploying phenotips, this option can be used to specify a SQL database backup from "
            "which to restore the database. This backup file can be generated by running "
            "`pg_dump -U postgres xwiki  | gzip -c - > phenotipsdb_backup.sql.gz`", type=check_restore_db)

    if command_name == DEPLOY_COMMAND:
        sp.add_argument("components", nargs="+", help="one or more components to deploy", choices=COMPONENT_ARG_CHOICES)

    sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="which kubernetes cluster to deploy to")


## DEPLOY_AND_LOAD_COMMAND
sp = subparsers.add_parser(DEPLOY_AND_LOAD_COMMAND, description="End-to-end deployment - deploys all seqr components and loads reference data + an example project")
sp.add_argument("deployment_target", choices=DEPLOYMENT_TARGETS, help="which kubernetes cluster to deploy to")


args = p.parse_args()

# process command-line args
if args.deployment_target and args.command != SET_ENVIRONMENT_COMMAND:
    commands_that_call_init_cluster = set([
        DEPLOY_ALL_COMMAND,
        DEPLOY_AND_LOAD_COMMAND,
    ])

    commands_that_dont_modify_kubernetes_state = set([
        SHELL_COMMAND,
        PORT_FORWARD_COMMAND,
        PORT_FORWARD_AND_LOG_COMMAND,
        LOG_COMMAND,
        DASHBOARD_COMMAND,
    ])

    if args.command not in commands_that_call_init_cluster and (args.command != DEPLOY_COMMAND or (args.components and "init-cluster" not in args.components)):
        set_context = (args.command in commands_that_dont_modify_kubernetes_state)
        check_kubernetes_context(args.deployment_target, set_if_different=set_context)

other_settings = {}
other_settings["BASE_DIR"] = os.path.abspath(os.path.dirname(__file__))

if args.command in [DEPLOY_COMMAND, DEPLOY_ALL_COMMAND, DEPLOY_AND_LOAD_COMMAND]:
    if args.command == DEPLOY_AND_LOAD_COMMAND:
        other_settings['RESET_DB'] = True
        other_settings["DELETE_BEFORE_DEPLOY"] = True
        other_settings['BUILD_DOCKER_IMAGE'] = True
    else:
        other_settings["RESET_DB"] = args.reset_db
        other_settings["DELETE_BEFORE_DEPLOY"] = True if args.delete_before_deploy or args.build_docker_image_and_reset_db else None
        other_settings["BUILD_DOCKER_IMAGE"] = True if args.build_docker_image or args.build_docker_image_and_reset_db else None
        other_settings["RESTORE_PHENOTIPS_DB_FROM_BACKUP"] = args.restore_phenotips_db_from_backup
        other_settings["RESTORE_SEQR_DB_FROM_BACKUP"] = args.restore_seqr_db_from_backup


    if args.command == DEPLOY_COMMAND:
        deployable_components = resolve_component_groups(args.deployment_target, args.components)

    elif args.command in [DEPLOY_ALL_COMMAND, DEPLOY_AND_LOAD_COMMAND]:
        deployable_components = [
            "init-cluster",
            "secrets",

            #"init-elasticsearch-cluster",
            #"cockpit",
            #"elasticsearch",
            #"kibana",
            #"es-client",
            #"es-master",
            #"es-data",
        ]

        if args.deployment_target not in ["minikube", "kube-solo"]:
            deployable_components += [
                "matchbox",
                "nginx",
            ]

        deployable_components += [
            "mongo",
            "postgres",
            "redis",
            "phenotips",
            "seqr",
            #"pipeline-runner",
        ]

    deploy(args.deployment_target, components=deployable_components, other_settings=other_settings)

    if args.command == DEPLOY_AND_LOAD_COMMAND:
        #create_user()
        load_reference_data(args.deployment_target)
        load_example_project(args.deployment_target)
        load_allele_frequencies(args.deployment_target)

    if args.command in [DEPLOY_ALL_COMMAND, DEPLOY_AND_LOAD_COMMAND]:
        components = ["seqr"]
    else:
        components = deployable_components

    component_port_pairs = get_component_port_pairs(components)
    if component_port_pairs:
        logger.info("=============")
        components = [pair[0] for pair in component_port_pairs]
        logger.info("tail %s logs ..." % components)
        os.system("sleep 10")

        procs1 = port_forward(component_port_pairs, deployment_target=args.deployment_target, wait=False, open_browser=True)
        procs2 = print_log(components, deployment_target=args.deployment_target, enable_stream_log=True, wait=False)
        wait_for(procs1 + procs2)

elif args.command == LOAD_COMMAND:
    if args.data == "reference-data":
        load_reference_data(args.deployment_target, genome_version=args.genome_version)
    elif args.data == "allele-frequencies":
        load_allele_frequencies(args.deployment_target, genome_version=args.genome_version)
    elif args.data == "example-project":
        load_example_project(args.deployment_target, genome_version=args.genome_version)
    elif args.data == "mongo":
        load_project(args.deployment_target, project_id=args.project_id, genome_version=args.genome_version, vcf=args.vcf, ped=args.ped)
    else:
        raise ValueError("Unexpected value for 'data': %s" % args.data)

elif args.command == LOG_COMMAND:
    components = resolve_component_groups(args.deployment_target, args.components)
    print_log(components, args.deployment_target, args.stream_log)

elif args.command == PORT_FORWARD_COMMAND:
    component_port_pairs = get_component_port_pairs(resolve_component_groups(args.deployment_target, args.components))
    port_forward(component_port_pairs, deployment_target=args.deployment_target)

elif args.command == PORT_FORWARD_AND_LOG_COMMAND:
    component_port_pairs = get_component_port_pairs(resolve_component_groups(args.deployment_target, args.components))
    if component_port_pairs:
        procs1 = port_forward(component_port_pairs, deployment_target=args.deployment_target, wait=False, open_browser=True)
        procs2 = print_log(resolve_component_groups(args.deployment_target, args.components), args.deployment_target, enable_stream_log=True, wait=False)

        wait_for(procs1 + procs2)

elif args.command in [COPY_FROM_POD_COMMAND, COPY_TO_POD_COMMAND]:
    full_pod_name = get_pod_name(args.component, deployment_target=args.deployment_target)
    if not full_pod_name:
        raise ValueError("No '%(pod_name)s' pods found. Is the kubectl environment configured in this terminal? and has this type of pod been deployed?" % locals())

    source_path = args.source_path
    dest_path = args.dest_path
    if args.command == COPY_FROM_POD_COMMAND:
        source_path = "%s:%s" % (full_pod_name, source_path)
    elif args.command == COPY_TO_POD_COMMAND:
        dest_path = "%s:%s" % (full_pod_name, dest_path)

    run("kubectl cp '%(source_path)s' '%(dest_path)s'" % locals())

elif args.command == SHELL_COMMAND:
    run_in_pod(args.component, '/bin/bash', deployment_target=args.deployment_target, is_interactive=True)

elif args.command == SET_ENVIRONMENT_COMMAND:
    set_environment(args.deployment_target)

elif args.command == CREATE_USER_COMMAND:
    create_user(args.deployment_target)

elif args.command == STATUS_COMMAND:
    show_status()

elif args.command == DASHBOARD_COMMAND:
    show_dashboard()

elif args.command == DELETE_COMMAND:
    for component in resolve_component_groups(args.deployment_target, args.components):
        delete_component(component, deployment_target=args.deployment_target)

elif args.command == RESET_COMMAND:
    reset_database(args.database, deployment_target=args.deployment_target)

elif args.command == TROUBLESHOOT_COMMAND:
    troubleshoot_component(args.component, deployment_target=args.deployment_target)

elif args.command == DELETE_ALL_COMMAND:
    delete_all(args.deployment_target)

else:
    p.error("Unexpected command: " + str(args.command))