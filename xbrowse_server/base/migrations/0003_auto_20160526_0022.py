# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-05-26 04:22
from __future__ import unicode_literals

from django.db import migrations, models
from xbrowse_server.base.models import Individual
import django.db.utils
import collections
from datetime import datetime
import uuid
import settings

import requests.exceptions
from xbrowse_server.phenotips.utilities import get_uname_pwd_for_project, convert_external_id_to_internal_id


def generate_guid(apps, schema_editor):
    # figure out which indiv. ids are unique
    indiv_id_counts = collections.Counter([indiv.indiv_id for indiv in Individual.objects.raw('select * from base_individual')])  
    non_unique_ids = set([indiv_id for indiv_id, count in indiv_id_counts.items() if count > 1])   

    for indiv in Individual.objects.raw('select * from base_individual'):
        # by default, for previously-existing Individual records, set guid = just the indiv_id
        indiv.guid = indiv.indiv_id  
        
        # for non-unique ids, only one of these records can be attached to a phenotips record, so check if this is it. If not, switch this to the new-style date-based guid.
        if indiv.indiv_id in non_unique_ids:
            print("non-unique id: %s. Checking if this patient is in phenotips for this project." % indiv.indiv_id )
            ok_to_use_new_guid = False
            if settings.PROJECTS_WITHOUT_PHENOTIPS and indiv.project.project_id in settings.PROJECTS_WITHOUT_PHENOTIPS:
                # phenotips is disabled for this project, so nothing will break if switching to the new-style guid.
                ok_to_use_new_guid = True
            else:
                try:
                    admin_uname, admin_pwd = get_uname_pwd_for_project(indiv.project.project_id)
                    patient_id = convert_external_id_to_internal_id(indiv.indiv_id, admin_uname, admin_pwd)
                    ok_to_use_new_guid = False  # patient is in phenotips, so can't use new id
                    print("Reusuing original id: " + str(indiv.indiv_id))
                except django.db.utils.IntegrityError:
                    # this means the individual is not in phenotips, so switching to the new guid won't break things
                    # create the new guid with timestamp
                    ok_to_use_new_guid = True
                except requests.exceptions.ConnectionError:
                    raw_input("ERROR: Could not connect to PhenoTips. Continue? ")
                    ok_to_use_new_guid = True
                except Exception as e:
                    raw_input("ERROR on project: %s. %s. Continue? " % (indiv.indiv_id, e))
                    ok_to_use_new_guid = True
                    
            if ok_to_use_new_guid:
                indiv.guid = datetime.now().strftime("%Y%m%d_%H%M%S_%f" + "_%s" % indiv.indiv_id)

        indiv.save()
        print("Set guid = " + indiv.guid)


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0002_auto_20160424_2020'),
    ]

    operations = [
        migrations.AddField(
            model_name='project',
            name='project_status',
            field=models.CharField(choices=[(b'draft', b'draft'), (b'submitted', b'submitted'), (b'accepted', b'accepted'), (b'needs_more_phenotypes', b'needs_more_phenotypes'), (b'analysis_in_progress', b'analysis_in_progress'), (b'deprecated', b'deprecated')], max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='family',
            name='analysis_status',
            field=models.CharField(choices=[(b'S', (b'Solved', b'fa-check-square-o')), (b'S_kgfp', (b'Solved - known gene for phenotype', b'fa-check-square-o')), (b'S_kgdp', (b'Solved - gene linked to different phenotype', b'fa-check-square-o')), (b'S_ng', (b'Solved - novel gene', b'fa-check-square-o')), (b'Sc_kgfp', (b'Strong candidate - known gene for phenotype', b'fa-check-square-o')), (b'Sc_kgdp', (b'Strong candidate - gene linked to different phenotype', b'fa-check-square-o')), (b'Sc_ng', (b'Strong candidate - novel gene', b'fa-check-square-o')), (b'Rncc', (b'Reviewed, no clear candidate', b'fa-check-square-o')), (b'I', (b'Analysis in Progress', b'fa-square-o')), (b'Q', (b'Waiting for data', b'fa-clock-o'))], default=b'Q', max_length=10),
        ),

        migrations.AlterField(
            model_name='projecttag',
            name='tag',
            field=models.CharField(max_length=50),
        ),

        # Add guid, but set value to a random uuid hash for now. Will compute the actual value next
        migrations.AddField(
            model_name='individual',
            name='guid',
            field=models.SlugField(max_length=165, default=uuid.uuid4),
        ),
        
        # Generate the correct guid value
        migrations.RunPython(generate_guid, reverse_code=migrations.RunPython.noop),

        # Add the 'unique' constraint
        #migrations.AlterField(
        #    model_name='individual',
        #    name='guid',
        #    field=models.SlugField(max_length=165, unique=True),
        #),
    ]
